{"version":3,"sources":["src/index.js"],"names":["startButton","document","querySelector","statusSpan","heading","padContainer","resetBtn","getElementById","selectLvl","computerSequence","playerSequence","maxRoundCount","roundCount","resetSound","Audio","pads","color","selector","sound","addEventListener","padHandler","startButtonHandler","classList","toggle","setLevel","parseInt","value","playComputerTurn","event","target","dataset","padClicked","find","pad","play","checkPress","level","arguments","length","undefined","getRandomItem","collection","randomIndex","Math","floor","random","setText","element","text","textContent","activatePad","_pad","add","console","log","setTimeout","remove","activatePads","sequence","forEach","el","index","concat","colorCollection","i","push","playHumanTurn","len","resetGame","remainingPresses","checkRound","alert","window"],"mappings":"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","file":"src.a2b27638.js","sourceRoot":"..","sourcesContent":["// DOM SELECTORS\nconst startButton = document.querySelector(\".js-start-button\");\nconst statusSpan = document.querySelector(\".js-status\");\nconst heading = document.querySelector(\".js-heading\");\nconst padContainer = document.querySelector(\".js-pad-container\");\nconst resetBtn=document.getElementById(\"resetBtn-js\");\nconst selectLvl=document.getElementById(\"level-js\")\n\n// VARIABLES\nlet computerSequence = []; // track the computer-generated sequence of pad presses\nlet playerSequence = []; // track the player-generated sequence of pad presses\nlet maxRoundCount = 0; // the max number of rounds, varies with the chosen level\nlet roundCount = 0; // track the number of rounds that have been played so far\n\n//reset audio \nconst resetSound= new Audio(\"http://codeskulptor-demos.commondatastorage.googleapis.com/descent/Crumble%20Sound.mp3\");\n\n\n// The `pads` array contains an array of pad objects.\nconst pads = [\n  {\n    color: \"red\",\n    selector: document.querySelector(\".js-pad-red\"),\n    sound: new Audio(\"http://commondatastorage.googleapis.com/codeskulptor-assets/jump.ogg\"),\n  },\n  // TODO: Add the objects for the green, blue, and yellow pads. Use object for the red pad above as an example.\n  {\n    color: \"green\",\n    selector: document.querySelector(\".js-pad-green\"),\n    sound: new Audio(\"http://commondatastorage.googleapis.com/codeskulptor-assets/week7-bounce.m4a\"),\n  },\n  {\n    color: \"blue\",\n    selector: document.querySelector(\".js-pad-blue\"),\n    sound: new Audio(\"http://codeskulptor-demos.commondatastorage.googleapis.com/pang/pop.mp3\"),\n  },\n  {\n    color: \"yellow\",\n    selector: document.querySelector(\".js-pad-yellow\"),\n    sound: new Audio(\"http://codeskulptor-demos.commondatastorage.googleapis.com/descent/spring.mp3\"),\n  },\n];\n\n/**\n * EVENT LISTENERS\n */\n\npadContainer.addEventListener(\"click\", padHandler);\nstartButton.addEventListener(\"click\", startButtonHandler);\n/**\n * EVENT HANDLERS\n */\n\nfunction startButtonHandler() {\n  // TODO: Write your code here.\n  //  1. Call setLevel() to set the level of the game\n  padContainer.classList.toggle(\"unclickable\");\n  maxRoundCount= setLevel(parseInt(selectLvl.value),10);\n  \n  \n  //  2. Increment the roundCount from 0 to 1\n  roundCount++;\n  \n  //  3. Hide the start button by adding the `.hidden` class to the start button\n  startButton.classList.toggle(\"hidden\");\n  //  4. Unhide the status element, which displays the status messages, by removing the `.hidden` class\n  \n  statusSpan.classList.toggle(\"hidden\");\n  //  5. Call `playComputerTurn()` to start the game with the computer going first.\n  playComputerTurn();\n  \n  return { startButton, statusSpan };\n}\n\nfunction padHandler(event) {\n  \n  //   // TODO: Write your code here.\n\n  //   // Called when one of the pads is clicked.\n  //   //  extracts the value of `data-color`\n  //   // attribute on the element that was clicked and stores it in the `color` variable\n  const { color } = event.target.dataset;\n  //   // `if (!color) return;` exits the function if the `color` variable is falsy\n  if (!color) return;\n\n  //   // 3. Use the `.find()` method to retrieve the pad from the `pads` array and store it\n  //   // in a variable called `pad`\n  const padClicked = pads.find(function (pad) {\n    if (pad.color == color) return pad;\n  });\n\n  //   // 4. Play the sound for the pad by calling `pad.sound.play()`\n\n  padClicked.sound.play();\n\n  //   // 5. Call `checkPress(color)` to verify the player's selection\n  checkPress(color);\n  //   // 6. Return the `color` variable as the output\n\n  return color;\n}\n\n/**\n * HELPER FUNCTIONS\n */\n\n/**\n * Sets the level of the game given a `level` parameter.\n * Returns the length of the sequence for a valid `level` parameter (1 - 4) or an error message otherwise.\n *\n * Each skill level will require the player to complete a different number of rounds, as follows:\n * Skill level 1: 8 rounds\n * Skill level 2: 14 rounds\n * Skill level 3: 20 rounds\n * Skill level 4: 31 rounds\n *\n **/\n\nfunction setLevel(level = 1) {\n\n  // TODO: Write your code here.\n  switch (level) {\n    case 1:\n      return 8;\n    case 2:\n      return 14;\n    case 3:\n      return 20;\n    case 4:\n      return 31;\n    case 5:\n      return \"Please enter level 1, 2, 3, or 4\";;\n    case 8:\n      return \"Please enter level 1, 2, 3, or 4\";;\n    default:\n      return \"Please enter level 1, 2, 3, or 4\";;\n    \n  }\n}\n\n/**\n * Returns a randomly selected item from a given array.\n *\n * 1. `Math.random()` returns a floating-point, pseudo-random number in the range 0 to less than 1\n *\n * 2. Multiplying the value from `Math.random()` with the length of the array ensures that the range\n * of the random number is less than the length of the array. So if the length of the array is 4,\n * the random number returned will be between 0 and 4 (exclusive)\n *\n * 3. Math.floor() rounds the numbers down to the largest integer less than or equal the given value\n *\n * Example:\n * getRandomItem([1, 2, 3, 4]) //> returns 2\n * getRandomItem([1, 2, 3, 4]) //> returns 1\n */\nfunction getRandomItem(collection) {\n  if (collection.length === 0) return null;\n  const randomIndex = Math.floor(Math.random() * collection.length);\n  return collection[randomIndex];\n}\n\n/**\n * Sets the status text of a given HTML element with a given a message\n */\nfunction setText(element, text) {\n  // TODO: Write your code here.\n  element.textContent = text;\n  return element;\n}\n\n/**\n * Activates a pad of a given color by playing its sound and light\n *\n * 1. Use the `.find()` method to retrieve the pad from the `pads` array and store it in\n * a variable called `pad`\n *\n * 2. Add the `\"activated\"` class to the selected pad\n *\n * 3. Play the sound associated with the pad\n *\n * 4. After 500ms, remove the `\"activated\"` class from the pad\n */\n\nfunction activatePad(color) {\n  // TODO: Write your code here.\n  const pad= pads.find((_pad)=>{\n    if(_pad.color===color)\n    return _pad;\n  })\n\n\n  pad.selector.classList.add(\"activated\");\n\n  pad.sound.play();\n  console.log(pad.sound);\n  setTimeout(()=>{\n    pad.selector.classList.remove(\"activated\");\n  },500);\n\n\n  \n}\n\n/**\n * Activates a sequence of colors passed as an array to the function\n *\n * 1. Iterate over the `sequence` array using `.forEach()`\n *\n * 2. For each element in `sequence`, use `setTimeout()` to call `activatePad()`, adding\n * a delay (in milliseconds) between each pad press. Without it, the pads in the sequence\n * will be activated all at once\n *\n * 3. The delay between each pad press, passed as a second argument to `setTimeout()`, needs\n * to change on each iteration. The first button in the sequence is activated after 600ms,\n * the next one after 1200ms (600ms after the first), the third one after 1800ms, and so on.\n */\n\nfunction activatePads(sequence) {\n\n  sequence.forEach((el,index) => {\n    setTimeout(()=>{\n      activatePad(el);\n\n    },600*(index))\n  });\n}\n\n/**\n * Allows the computer to play its turn.\n *\n * 1. Add the `\"unclickable\"` class to `padContainer` to prevent the user from pressing\n * any of the pads\n *\n * 2. The status should display a message that says \"The computer's turn...\"\n *\n * 3. The heading should display a message that lets the player know how many rounds are left\n * (e.g., \"`Round ${roundCount} of ${maxRoundCount}`\")\n *\n * 4. Push a randomly selected color into the `computerSequence` array\n *\n * 5. Call `activatePads(computerSequence)` to light up each pad according to order defined in\n * `computerSequence`\n *\n * 6. The playHumanTurn() function needs to be called after the computer’s turn is over, so\n * we need to add a delay and calculate when the computer will be done with the sequence of\n * pad presses. The `setTimeout()` function executes `playHumanTurn(roundCount)` one second\n * after the last pad in the sequence is activated. The total duration of the sequence corresponds\n * to the current round (roundCount) multiplied by 600ms which is the duration for each pad in the\n * sequence.\n */\nfunction playComputerTurn() {\n\n  console.log('playComputerTurn',roundCount);\n  \n  padContainer.classList.add(\"unclickable\");\n  setText(heading,`round ${roundCount} of ${maxRoundCount}`);\n  setText(statusSpan,\"The computer's turn...\");\n  \n  const colorCollection=['red','yellow','green','blue'];\n  computerSequence=[];\n  for(let i=0;i<roundCount;i++){\n    console.log(i);\n    const color =getRandomItem(colorCollection);\n    computerSequence.push(color);\n  }\n  activatePads(computerSequence);\n  setTimeout(() => playHumanTurn(roundCount), roundCount * 600 + 1000); // 5\n  console.log('playComputerTurn',roundCount);\n}\n\n/**\n * Allows the player to play their turn.\n*\n* 1. Remove the \"unclickable\" class from the pad container so that each pad is clickable again\n*\n* 2. Display a status message showing the player how many presses are left in the round\n*/\nfunction playHumanTurn() {\n  setText(statusSpan,\"Player turn...\");\n  padContainer.classList.remove(\"unclickable\");\n  setText(heading,`Round ${roundCount} of ${maxRoundCount}`);\n\n}\n\n/**\n * Checks the player's selection every time the player presses on a pad during\n * the player's turn\n *\n * 1. Add the `color` variable to the end of the `playerSequence` array\n *\n * 2. Store the index of the `color` variable in a variable called `index`\n *\n * 3. Calculate how many presses are left in the round using\n * `computerSequence.length - playerSequence.length` and store the result in\n * a variable called `remainingPresses`\n *\n * 4. Set the status to let the player know how many presses are left in the round\n *\n * 5. Check whether the elements at the `index` position in `computerSequence`\n * and `playerSequence` match. If they don't match, it means the player made\n * a wrong turn, so call `resetGame()` with a failure message and exit the function\n *\n * 6. If there are no presses left (i.e., `remainingPresses === 0`), it means the round\n * is over, so call `checkRound()` instead to check the results of the round\n *\n */\nfunction checkPress(color) {\n  // TODO: Write your code here.\n  playerSequence.push(color)\n\n  const len=playerSequence.length;\n\n  if(computerSequence[len-1]!==playerSequence[len-1])\n  {resetGame(\"Wrong Selection\");\n    return;\n  }\n\n\n  remainingPresses=computerSequence.length - playerSequence.length;\n  setText(statusSpan,`remaining Presses...${remainingPresses}`);\n  if(remainingPresses==0){\n    checkRound();\n  }\n\n}\n\n/**\n * Checks each round to see if the player has completed all the rounds of the game * or advance to the next round if the game has not finished.\n *\n * 1. If the length of the `playerSequence` array matches `maxRoundCount`, it means that\n * the player has completed all the rounds so call `resetGame()` with a success message\n *\n * 2. Else, the `roundCount` variable is incremented by 1 and the `playerSequence` array\n * is reset to an empty array.\n * - And the status text is updated to let the player know to keep playing (e.g., \"Nice! Keep going!\")\n * - And `playComputerTurn()` is called after 1000 ms (using setTimeout()). The delay\n * is to allow the user to see the success message. Otherwise, it will not appear at\n * all because it will get overwritten.\n *\n */\n\nfunction checkRound() {\n  // TODO: Write your code here.\n  if(playerSequence.length===maxRoundCount)\n  resetGame();\n  else{\n    roundCount++;\nplayerSequence=[];\nsetTimeout(()=>{playComputerTurn()},1000);\n  }\n}\n\n/**\n * Resets the game. Called when either the player makes a mistake or wins the game.\n *\n * 1. Reset `computerSequence` to an empty array\n *\n * 2. Reset `playerSequence` to an empty array\n *\n * 3. Reset `roundCount` to an empty array\n */\n\n\nresetBtn.addEventListener(\"click\",()=>{resetGame(\"Game reset\")});\n\nfunction resetGame(text=\"Game Reset\") {\n  resetSound.play();\n  // TODO: Write your code here.\n  // Uncomment the code below:\n  computerSequence=[];\n  playerSequence=[];\n  roundCount=0\n  maxRoundCount=0;\n  alert(text);\n  setText(heading, \"Simon Says\");\n  startButton.classList.remove(\"hidden\");\n  statusSpan.classList.add(\"hidden\");\n  padContainer.classList.add(\"unclickable\");\n}\n\n/**\n * Please do not modify the code below.\n * Used for testing purposes.\n *\n */\nwindow.statusSpan = statusSpan;\nwindow.heading = heading;\nwindow.padContainer = padContainer;\nwindow.pads = pads;\nwindow.computerSequence = computerSequence;\nwindow.playerSequence = playerSequence;\nwindow.maxRoundCount = maxRoundCount;\nwindow.roundCount = roundCount;\nwindow.startButtonHandler = startButtonHandler;\nwindow.padHandler = padHandler;\nwindow.setLevel = setLevel;\nwindow.getRandomItem = getRandomItem;\nwindow.setText = setText;\nwindow.activatePad = activatePad;\nwindow.activatePads = activatePads;\nwindow.playComputerTurn = playComputerTurn;\nwindow.playHumanTurn = playHumanTurn;\nwindow.checkPress = checkPress;\nwindow.checkRound = checkRound;\nwindow.resetGame = resetGame;\n\n\n"]}